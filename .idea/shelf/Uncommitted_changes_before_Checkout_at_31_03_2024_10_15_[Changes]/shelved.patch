Index: LogicGame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Pawn:\r\n\tdef __init__(self, player, name):\r\n\t\t\"\"\"\r\n\t\t:param player: player number 1 or 2\r\n\t\t:param name: The name of the players\r\n\t\t\"\"\"\r\n\t\tself.__player = player\r\n\t\tself.__name = name\r\n\r\n\tdef getPlayer(self):\r\n\t\treturn self.__player\r\n\r\nclass Logic:\r\n\tdef __init__(self, name1, name2):\r\n\t\t\"\"\"\r\n\t\t:param name1: Name of the players 1\r\n\t\t:param name2: Name of the players 2\r\n\t\t\"\"\"\r\n\t\tself.__n = 11\r\n\t\tself.__Board = []\r\n\t\tself.__PlayerToPlay = 1\r\n\t\tself.__name1, self.__name2 = name1, name2\r\n\r\n\tdef get_current_player(self):\r\n\t\treturn self.__PlayerToPlay\r\n\r\n\tdef get_Board(self):\r\n\t\treturn self.__Board\r\n\r\n\tdef get_PlayerToPlay(self) -> int:\r\n\t\treturn self.__PlayerToPlay\r\n\r\n\tdef set_PlayerToPlay(self, newPayerToPlay: int):\r\n\t\tself.__PlayerToPlay = newPayerToPlay\r\n\r\n\tdef CreateBoard(self):\r\n\t\tfor (a, b, c) in [(6, 4, 1), (4, 7, 0), (3, 8, 0), (2, 9, 0), (1, 10, 0), (1, 9, 1), (0, 10, 1), (0, 9, 2),\r\n\t\t                  (0, 8, 3), (0, 7, 4), (1, 4, 6)]:\r\n\t\t\t# nine is a null box & one is an empty box\r\n\t\t\tboardAnex = [9 for _ in range(a)] + [1 for _ in range(b)] + [9 for _ in range(c)]\r\n\t\t\tself.__Board.append(boardAnex)\r\n\r\n\tdef Display(self):\r\n\t\tself.CreateBoard()\r\n\t\tfor row in range(self.__n):\r\n\t\t\tprint(\" \" * row, end=\" \")\r\n\t\t\tfor col in range(self.__n):\r\n\t\t\t\tif self.__Board[row][col] == 9:\r\n\t\t\t\t\tprint(\" \", end=\" \")\r\n\t\t\t\telif self.__Board[row][col] == 1:\r\n\t\t\t\t\tprint(\"0\", end=\" \")\r\n\t\t\t\telif isinstance(self.__Board[row][col], Pawn) and self.__PlayerToPlay == 1:\r\n\t\t\t\t\tprint(\"*\", end=\" \")\r\n\t\t\t\telif isinstance(self.__Board[row][col], Pawn) and self.__PlayerToPlay == 2:\r\n\t\t\t\t\tprint(\"_\", end=\" \")\r\n\t\t\tprint(\"\")\r\n\r\n\tdef PossibleToPut(self, i: int, j: int):\r\n\t\t\"\"\"\r\n\t\t:param i: Coordinate X of player\r\n\t\t:param j: Coordinate Y of player\r\n\t\t:return: boolean True or False\r\n\t\t\"\"\"\r\n\t\treturn True if 0 <= i < self.__n and 0 <= j < self.__n and self.__Board[i][j] == 1 else False\r\n\r\n\tdef Put(self, i, j):\r\n\t\tif self.PossibleToPut(i, j):\r\n\t\t\tif self.__PlayerToPlay == 1:\r\n\t\t\t\tself.__Board[i][j] = Pawn(self.__PlayerToPlay, self.__name1)\r\n\t\t\telif self.__PlayerToPlay == 2:\r\n\t\t\t\tself.__Board[i][j] = Pawn(self.__PlayerToPlay, self.__name2)\r\n\r\n\t\telse:\r\n\t\t\tprint(\"Cette position est impossible !\")\r\n\r\n\tdef OneDirection(self, PositionY, PositionX, i, j):\r\n\t\t\"\"\"\r\n\t\t\tCalculate the length of a sequence of opponent's pieces in one direction.\r\n\r\n\t\t\t:param PositionY: The Y coordinate of the current position.\r\n\t\t\t:param PositionX: The X coordinate of the current position.\r\n\t\t\t:param i: The change in X direction (vector).\r\n\t\t\t:param j: The change in Y direction (vector).\r\n\t\t\t:return: The number of marks of the current player on the liners of the player's position.\r\n\t\"\"\"\r\n\t\treturn 1 + self.OneDirection(PositionY + i, PositionX + j, i, j) \\\r\n\t\t\tif (0 <= PositionX + j < self.__n\r\n\t\t\t    and 0 <= PositionY + i < self.__n\r\n\t\t\t    and self.__Board[PositionY + i][PositionX + j] == (-self.__PlayerToPlay)) \\\r\n\t\t\telse 0\r\n\r\n\tdef AllDirection(self, PositionY, PositionX):\r\n\t\t\"\"\"\r\n\t\t\tCheck if there is a winning sequence in any direction.\r\n\r\n\t\t\t:param PositionY: The Y coordinate of the current position.\r\n\t\t\t:param PositionX: The X coordinate of the current position.\r\n\t\t\t:return: True if there's a winning sequence in any direction, False otherwise.\r\n\t\t\"\"\"\r\n\t\tcolumn, line, Slash, = 0, 0, 0\r\n\t\tfor index, (i, j) in enumerate([(0, -1), (0, 1), (-1, 0), (1, 0), (-1, 1), (1, -1)]):\r\n\r\n\t\t\tif index < 2:\r\n\t\t\t\tcolumn += self.OneDirection(PositionY, PositionX, i, j)\r\n\t\t\telif 2 <= index < 4:\r\n\t\t\t\tline += self.OneDirection(PositionY, PositionX, i, j)\r\n\t\t\telse:\r\n\t\t\t\tSlash += self.OneDirection(PositionY, PositionX, i, j)\r\n\r\n\t\treturn True if column + 1 >= 5 or line + 1 >= 5 or Slash + 1 >= 5 else False\r\n\r\n\r\nif __name__ == '__main__':\r\n\tlogic_obj = Logic('Luc', 'Jean-Marc')\r\n\tlogic_obj.CreateBoard()\r\n\tlogic_obj.Put(0, 7)\r\n\tlogic_obj.Display()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LogicGame.py b/LogicGame.py
--- a/LogicGame.py	(revision 8763a969605a56b2f4a526f84d82bd8f038a9ba3)
+++ b/LogicGame.py	(date 1711872937643)
@@ -5,7 +5,7 @@
 		:param name: The name of the players
 		"""
 		self.__player = player
-		self.__name = name
+		self._name = name
 
 	def getPlayer(self):
 		return self.__player
@@ -30,8 +30,8 @@
 	def get_PlayerToPlay(self) -> int:
 		return self.__PlayerToPlay
 
-	def set_PlayerToPlay(self, newPayerToPlay: int):
-		self.__PlayerToPlay = newPayerToPlay
+	def set_PlayerToPlay(self, new_payer_to_play: int):
+		self.__PlayerToPlay = new_payer_to_play
 
 	def CreateBoard(self):
 		for (a, b, c) in [(6, 4, 1), (4, 7, 0), (3, 8, 0), (2, 9, 0), (1, 10, 0), (1, 9, 1), (0, 10, 1), (0, 9, 2),
Index: GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom LogicGame import Logic, Pawn\r\n\r\n\r\nclass GUIPlateau:\r\n\tdef __init__(self):\r\n\t\tpygame.init()\r\n\t\t# Windows game\r\n\t\tself.__width = 1080\r\n\t\tself.__height = 720\r\n\t\tself.__screen = pygame.display.set_mode((self.__width, self.__height))\r\n\t\tpygame.display.set_caption('yinsh')\r\n\t\tself.__running = True\r\n\t\tself.__background = (170, 184, 197)\r\n\r\n\t\tself.__logic_obj = Logic('Luc', 'Jean-Marc')\r\n\t\tself._create_board = self.__logic_obj.CreateBoard()\r\n\t\tself._get_board = self.__logic_obj.get_Board()\r\n\r\n\t\tself._rect_all = pygame.Rect(0, 0, self.__width, self.__height)\r\n\t\tself._rect_board = pygame.Rect(self._rect_all.centerx - self.__width / 2.4, self._rect_all.centery - self.__height / 2.4, self.__width / 1.2, self.__height / 1.2)\r\n\t\tself._half_dim_hit_box = 25\r\n\t\tself._padding_rect = 30\r\n\r\n\t\tself._position_points = []\r\n\r\n\t\tself._rect_width = self._half_dim_hit_box * 2 + 4\r\n\t\tself._rect_height = self._half_dim_hit_box * 2\r\n\r\n\t\tself._position_click_x, self._position_click_y = -1, -1\r\n\r\n\tdef hit_box(self):\r\n\t\tx, y = pygame.mouse.get_pos()\r\n\t\tfor point in self._position_points:\r\n\t\t\tif (point['pos_x'] - 30 < x < point['pos_x'] + 30) and (point['pos_y'] - 25 < y < point['pos_y'] + 25):\r\n\r\n\t\t\t\tif self._position_click_y == -1 and self._position_click_x == -1:\r\n\t\t\t\t\tself._position_click_y = int(((point['pos_x'] - (30 * ((point['pos_y'] // 51) - 2))) // 60) - 1)\r\n\t\t\t\t\tself._position_click_x = int(point['pos_y'] // 51) - 2\r\n\t\t\t\t\tself.__logic_obj.Put(self._position_click_x, self._position_click_y)\r\n\r\n\t\t# print(self._position_click_x, self._position_click_y)\r\n\r\n\t\t# initialise click\r\n\t\tself._position_click_x, self._position_click_y = -1, -1\r\n\r\n\t\tself.__logic_obj.set_PlayerToPlay((self.__logic_obj.get_PlayerToPlay() % 2) + 1)\r\n\r\n\tdef display_gui(self):\r\n\t\tfor row in range(len(self._get_board)):\r\n\t\t\tfor col in range(len(self._get_board[row])):\r\n\t\t\t\tpos_x, pos_y = self.calculate_position(row, col)\r\n\t\t\t\tself.draw_circles_and_lines(row, col, pos_x, pos_y)\r\n\r\n\tdef calculate_position(self, row, col):\r\n\t\tdimension = self._padding_rect * 2\r\n\t\tpos_x = self._rect_board.left + col * dimension + row * self._padding_rect\r\n\t\tpos_y = (self._rect_board.top + row * self._padding_rect) * 1.7\r\n\t\treturn pos_x, pos_y\r\n\r\n\tdef draw_circles_and_lines(self, row, col, pos_x, pos_y):\r\n\t\tif self._get_board[row][col] != 9:\r\n\t\t\tself._position_points.append({'pos_x': pos_x, 'pos_y': pos_y})\r\n\r\n\t\t# Draw lines\r\n\t\tif self._get_board[row][col] != 9:\r\n\t\t\tself.draw_adjacent_lines(row, col, pos_x, pos_y)\r\n\r\n\t\t# Draw circles of pawns\r\n\t\tif isinstance(self._get_board[row][col], Pawn):\r\n\t\t\tplayer = self._get_board[row][col].getPlayer()\r\n\t\t\tcolor = (255, 255, 255) if player == 1 else (0, 0, 0)\r\n\t\t\tpygame.draw.circle(self.__screen, color, (pos_x, pos_y), 25, 7)\r\n\r\n\tdef draw_adjacent_lines(self, row, col, pos_x, pos_y):\r\n\t\tdimension = self._padding_rect * 2\r\n\t\tboard = self._get_board\r\n\t\tscreen = self.__screen\r\n\t\trect_board = self._rect_board\r\n\r\n\t\tif col + 1 < len(board[row]) and board[row][col + 1] != 9:\r\n\t\t\tcol_pos_x = rect_board.left + (col + 1) * dimension + row * self._padding_rect\r\n\t\t\tcol_pos_y = (rect_board.top + row * self._padding_rect) * 1.7\r\n\r\n\t\t\tpygame.draw.line(screen, (0, 0, 0), (pos_x, pos_y), (col_pos_x, col_pos_y), 2)\r\n\r\n\t\tif row + 1 < len(board):\r\n\t\t\tif col - 1 < len(board) and board[row + 1][col - 1] != 9:\r\n\t\t\t\tdiag_col_pos_x = rect_board.left + (col - 1) * dimension + (row + 1) * self._padding_rect\r\n\t\t\t\tdiag_col_pos_y = (rect_board.top + (row + 1) * self._padding_rect) * 1.7\r\n\r\n\t\t\t\tpygame.draw.line(screen, (0, 0, 0), (pos_x, pos_y), (diag_col_pos_x, diag_col_pos_y), 2)\r\n\r\n\t\t\tif board[row + 1][col] != 9:\r\n\t\t\t\tnext_row_pos_x = rect_board.left + col * dimension + (row + 1) * self._padding_rect\r\n\t\t\t\tnext_row_pos_y = (rect_board.top + (row + 1) * self._padding_rect) * 1.7\r\n\r\n\t\t\t\tpygame.draw.line(screen, (0, 0, 0), (pos_x, pos_y), (next_row_pos_x, next_row_pos_y), 2)\r\n\r\n\tdef run(self):\r\n\t\twhile self.__running:\r\n\t\t\tself.__screen.fill(self.__background)\r\n\r\n\t\t\tself.display_gui()\r\n\t\t\tpygame.display.flip()\r\n\r\n\t\t\t# if player close windows\r\n\t\t\tfor event in pygame.event.get():\r\n\t\t\t\tif event.type == pygame.MOUSEBUTTONDOWN:\r\n\t\t\t\t\tself.hit_box()\r\n\t\t\t\tif event.type == pygame.QUIT:\r\n\t\t\t\t\tself.__running = False\r\n\t\t\t\t\tpygame.quit()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\tplateau = GUIPlateau()\r\n\tplateau.run()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI.py b/GUI.py
--- a/GUI.py	(revision 8763a969605a56b2f4a526f84d82bd8f038a9ba3)
+++ b/GUI.py	(date 1711872937635)
@@ -42,10 +42,12 @@
 		# print(self._position_click_x, self._position_click_y)
 
 		# initialise click
-		self._position_click_x, self._position_click_y = -1, -1
 
 		self.__logic_obj.set_PlayerToPlay((self.__logic_obj.get_PlayerToPlay() % 2) + 1)
 
+	def reinitialise_click(self):
+		self._position_click_x, self._position_click_y = -1, -1
+
 	def display_gui(self):
 		for row in range(len(self._get_board)):
 			for col in range(len(self._get_board[row])):
@@ -97,6 +99,9 @@
 
 				pygame.draw.line(screen, (0, 0, 0), (pos_x, pos_y), (next_row_pos_x, next_row_pos_y), 2)
 
+	def game(self):
+		self.display_gui()
+		
 	def run(self):
 		while self.__running:
 			self.__screen.fill(self.__background)
